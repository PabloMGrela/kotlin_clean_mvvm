#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME}#end

import androidx.recyclerview.widget.RecyclerView
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup

class ${NAME}Adapter(
    private val itemClickListener: ($DataType) -> Unit
) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {

    companion object {
        private const val TITLE_TYPE = 0
        private const val ITEM_TYPE = 1
    }

    init {
        setHasStableIds(true)
    }

    private var list = mutableListOf<$DataType>()

    fun updateData(list: List<$DataType>){
        this.list.clear()
        this.list.addAll(list)
        notifyDataSetChanged()
    }

    override fun onCreateViewHolder(container: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        val inflater = LayoutInflater.from(container.context)
        return when (viewType){
            TITLE_TYPE -> createTitleViewHolder(container, inflater)
            ITEM_TYPE -> create${NAME}ViewHolder(container, inflater)
            else -> throw IllegalStateException()
        }
    }

    override fun getItemCount(): Int = list.size + 1

    override fun getItemViewType(position: Int): Int {
        return when(position) {
            0 -> TITLE_TYPE
            else -> ITEM_TYPE
        }
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        when(holder) {
            is TitleViewHolder -> holder.bind()
            is ${NAME}ViewHolder -> holder.bind(list[position - 1])
        }
    }

    private fun createTitleViewHolder(parent: ViewGroup, inflater: LayoutInflater) = TitleViewHolder(inflater.inflate(R.layout.$TitleRowLayout, parent, false))

    class TitleViewHolder(view: View) : RecyclerView.ViewHolder(view) {

        fun bind(){

        }
    }

    private fun create${NAME}ViewHolder(parent: ViewGroup, inflater: LayoutInflater) = ${NAME}ViewHolder(inflater.inflate(R.layout.$ItemRowLayout, parent, false))

    inner class ${NAME}ViewHolder(view: View) : RecyclerView.ViewHolder(view) {

        fun bind(data: $DataType) {
            setOnClickListener { itemClickListener(data) }
        }
    }

}